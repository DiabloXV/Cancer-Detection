// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain_Layer.Models.CTScan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CTScans", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fa85f64-5717-4562-b3fc-2c963f66afa8"),
                            ImagePath = "/images/scan1.jpg",
                            UploadDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6")
                        },
                        new
                        {
                            Id = new Guid("6fa85f64-5717-4562-b3fc-2c963f66afa9"),
                            ImagePath = "/images/scan2.jpg",
                            UploadDate = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("4fa85f64-5717-4562-b3fc-2c963f66afa7")
                        });
                });

            modelBuilder.Entity("Domain_Layer.Models.PredictionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Confidence")
                        .HasColumnType("real");

                    b.Property<string>("Prediction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("PredictionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ScanId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScanId");

                    b.ToTable("PredictionResults", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fa85f64-5717-4562-b3fc-2c963f66afa0"),
                            Confidence = 0.95f,
                            Prediction = "NSCLC",
                            PredictionDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScanId = new Guid("5fa85f64-5717-4562-b3fc-2c963f66afa8")
                        },
                        new
                        {
                            Id = new Guid("7fa85f64-5717-4562-b3fc-2c963f66afc9"),
                            Confidence = 0.89f,
                            Prediction = "SCLC",
                            PredictionDate = new DateTime(2023, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScanId = new Guid("6fa85f64-5717-4562-b3fc-2c963f66afa9")
                        });
                });

            modelBuilder.Entity("Domain_Layer.Modles.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Email = "admin@example.com",
                            PasswordHash = new byte[] { 1, 2, 3 },
                            PasswordSalt = new byte[] { 4, 5, 6 }
                        },
                        new
                        {
                            Id = new Guid("4fa85f64-5717-4562-b3fc-2c963f66afa7"),
                            Email = "user@example.com",
                            PasswordHash = new byte[] { 7, 8, 9 },
                            PasswordSalt = new byte[] { 10, 11, 12 }
                        });
                });

            modelBuilder.Entity("Domain_Layer.Models.CTScan", b =>
                {
                    b.HasOne("Domain_Layer.Modles.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain_Layer.Models.PredictionResult", b =>
                {
                    b.HasOne("Domain_Layer.Models.CTScan", null)
                        .WithMany()
                        .HasForeignKey("ScanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
